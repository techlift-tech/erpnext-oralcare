{"version":3,"file":"erpnext_oralcare.js","sources":["../../../../apps/erpnext_oralcare/erpnext_oralcare/public/js/kanban_board_new.js"],"sourcesContent":["frappe.provide(\"frappe.views\");\n\n(function() {\n\n\tvar method_prefix = 'frappe.desk.doctype.kanban_board.kanban_board.';\n\n\tvar store = fluxify.createStore({\n\t\tid: 'store',\n\t\tinitialState: {\n\t\t\tdoctype: '',\n\t\t\tboard: {},\n\t\t\tcard_meta: {},\n\t\t\tcards: [],\n\t\t\tcolumns: [],\n\t\t\tfilters_modified: false,\n\t\t\tcur_list: {},\n\t\t\tempty_state: true\n\t\t},\n\t\tactionCallbacks: {\n\t\t\tinit: function(updater, opts) {\n\t\t\t\tupdater.set({\n\t\t\t\t\tempty_state: true\n\t\t\t\t});\n\n\t\t\t\tvar board = opts.board;\n\t\t\t\tvar card_meta = opts.card_meta;\n\t\t\t\topts.card_meta = card_meta;\n\t\t\t\topts.board = board;\n\t\t\t\tvar cards = opts.cards.map(function(card) {\n\t\t\t\t\treturn prepare_card(card, opts);\n\t\t\t\t});\n\t\t\t\tvar columns = prepare_columns(board.columns);\n\n\t\t\t\tupdater.set({\n\t\t\t\t\tdoctype: opts.doctype,\n\t\t\t\t\tboard: board,\n\t\t\t\t\tcard_meta: card_meta,\n\t\t\t\t\tcards: cards,\n\t\t\t\t\tcolumns: columns,\n\t\t\t\t\tcur_list: opts.cur_list,\n\t\t\t\t\tempty_state: false,\n\t\t\t\t\twrapper: opts.wrapper\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate_cards: function(updater, cards) {\n\t\t\t\tvar state = this;\n\t\t\t\tvar _cards = cards\n\t\t\t\t\t.map(card => prepare_card(card, state))\n\t\t\t\t\t.concat(this.cards)\n\t\t\t\t\t.uniqBy(card => card.name);\n\n\t\t\t\tupdater.set({\n\t\t\t\t\tcards: _cards\n\t\t\t\t});\n\t\t\t},\n\t\t\tadd_column: function(updater, col) {\n\t\t\t\tif(frappe.model.can_create('Custom Field')) {\n\t\t\t\t\tfluxify.doAction('update_column', col, 'add');\n\t\t\t\t} else {\n\t\t\t\t\tfrappe.msgprint({\n\t\t\t\t\t\ttitle: __('Not permitted'),\n\t\t\t\t\t\tmessage: __('You are not allowed to create columns'),\n\t\t\t\t\t\tindicator: 'red'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tarchive_column: function(updater, col) {\n\t\t\t\tfluxify.doAction('update_column', col, 'archive');\n\t\t\t},\n\t\t\trestore_column: function(updater, col) {\n\t\t\t\tfluxify.doAction('update_column', col, 'restore');\n\t\t\t},\n\t\t\tupdate_column: function(updater, col, action) {\n\t\t\t\tvar doctype = this.doctype;\n\t\t\t\tvar board = this.board;\n\t\t\t\tfetch_customization(doctype)\n\t\t\t\t\t.then(function(doc) {\n\t\t\t\t\t\treturn modify_column_field_in_c11n(doc, board, col.title, action);\n\t\t\t\t\t})\n\t\t\t\t\t.then(save_customization)\n\t\t\t\t\t.then(function() {\n\t\t\t\t\t\treturn update_kanban_board(board.name, col.title, action);\n\t\t\t\t\t}).then(function(r) {\n\t\t\t\t\t\tvar cols = r.message;\n\t\t\t\t\t\tupdater.set({\n\t\t\t\t\t\t\tcolumns: prepare_columns(cols)\n\t\t\t\t\t\t});\n\t\t\t\t\t}, function(err) {\n\t\t\t\t\t\tconsole.error(err); // eslint-disable-line\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tadd_card: function(updater, card_title, column_title) {\n\t\t\t\tvar doc = frappe.model.get_new_doc(this.doctype);\n\t\t\t\tvar field = this.card_meta.title_field;\n\t\t\t\tvar quick_entry = this.card_meta.quick_entry;\n\t\t\t\tvar state = this;\n\n\t\t\t\tvar doc_fields = {};\n\t\t\t\tdoc_fields[field.fieldname] = card_title;\n\t\t\t\tdoc_fields[this.board.field_name] = column_title;\n\t\t\t\tthis.cur_list.filter_area.get().forEach(function(f) {\n\t\t\t\t\tif (f[2] !== \"=\") return;\n\t\t\t\t\tdoc_fields[f[1]] = f[3];\n\t\t\t\t});\n\n\t\t\t\t$.extend(doc, doc_fields);\n\n\t\t\t\t// add the card directly\n\t\t\t\t// for better ux\n\t\t\t\tconst card = prepare_card(doc, state);\n\t\t\t\tcard._disable_click = true;\n\t\t\t\tconst cards = [...state.cards, card];\n\t\t\t\t// remember the name which we will override later\n\t\t\t\tconst old_name = doc.name;\n\t\t\t\tupdater.set({ cards });\n\n\t\t\t\tif (field && !quick_entry) {\n\t\t\t\t\treturn insert_doc(doc)\n\t\t\t\t\t\t.then(function(r) {\n\t\t\t\t\t\t\t// update the card in place with the updated doc\n\t\t\t\t\t\t\tconst updated_doc = r.message;\n\t\t\t\t\t\t\tconst index = state.cards.findIndex(card => card.name === old_name);\n\t\t\t\t\t\t\tconst card = prepare_card(updated_doc, state);\n\t\t\t\t\t\t\tconst new_cards = state.cards.slice();\n\t\t\t\t\t\t\tnew_cards[index] = card;\n\t\t\t\t\t\t\tupdater.set({ cards: new_cards });\n\t\t\t\t\t\t\tfluxify.doAction('update_order');\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tfrappe.new_doc(this.doctype, doc);\n\t\t\t\t}\n\t\t\t},\n\t\t\tupdate_card: function(updater, card) {\n\t\t\t\tvar index = -1;\n\t\t\t\tthis.cards.forEach(function(c, i) {\n\t\t\t\t\tif (c.name === card.name) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tvar cards = this.cards.slice();\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tcards.splice(index, 1, card);\n\t\t\t\t}\n\t\t\t\tupdater.set({ cards: cards });\n\t\t\t},\n\t\t\tupdate_doc: function(updater, doc, card) {\n\t\t\t\tvar state = this;\n\t\t\t\treturn frappe.call({\n\t\t\t\t\tmethod: method_prefix + \"update_doc\",\n\t\t\t\t\targs: { doc: doc },\n\t\t\t\t\tfreeze: true\n\t\t\t\t}).then(function(r) {\n\t\t\t\t\tvar updated_doc = r.message;\n\t\t\t\t\tvar updated_card = prepare_card(card, state, updated_doc);\n\t\t\t\t\tfluxify.doAction('update_card', updated_card);\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate_order: function(updater) {\n\t\t\t\t// cache original order\n\t\t\t\tconst _cards = this.cards.slice();\n\t\t\t\tconst _columns = this.columns.slice();\n\n\t\t\t\tconst order = {};\n\t\t\t\tthis.wrapper.find('.kanban-column[data-column-value]')\n\t\t\t\t\t.each(function() {\n\t\t\t\t\t\tvar col_name = $(this).data().columnValue;\n\t\t\t\t\t\torder[col_name] = [];\n\t\t\t\t\t\t$(this).find('.kanban-card-wrapper').each(function() {\n\t\t\t\t\t\t\tvar card_name = $(this).data().name;\n\t\t\t\t\t\t\torder[col_name].push(card_name);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: method_prefix + \"update_order\",\n\t\t\t\t\targs: {\n\t\t\t\t\t\tboard_name: this.board.name,\n\t\t\t\t\t\torder: order\n\t\t\t\t\t},\n\t\t\t\t\tcallback: (r) => {\n\t\t\t\t\t\tvar board = r.message[0];\n\t\t\t\t\t\tvar updated_cards = r.message[1];\n\t\t\t\t\t\tvar cards = update_cards_column(updated_cards);\n\t\t\t\t\t\tvar columns = prepare_columns(board.columns);\n\t\t\t\t\t\tupdater.set({\n\t\t\t\t\t\t\tcards: cards,\n\t\t\t\t\t\t\tcolumns: columns\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}).fail(function() {\n\t\t\t\t\t// revert original order\n\t\t\t\t\tupdater.set({\n\t\t\t\t\t\tcards: _cards,\n\t\t\t\t\t\tcolumns: _columns\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate_column_order: function(updater, order) {\n\t\t\t\treturn frappe.call({\n\t\t\t\t\tmethod: method_prefix + \"update_column_order\",\n\t\t\t\t\targs: {\n\t\t\t\t\t\tboard_name: this.board.name,\n\t\t\t\t\t\torder: order\n\t\t\t\t\t}\n\t\t\t\t}).then(function(r) {\n\t\t\t\t\tvar board = r.message;\n\t\t\t\t\tvar columns = prepare_columns(board.columns);\n\t\t\t\t\tupdater.set({\n\t\t\t\t\t\tcolumns: columns\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tset_indicator: function(updater, column, color) {\n\t\t\t\treturn frappe.call({\n\t\t\t\t\tmethod: method_prefix + \"set_indicator\",\n\t\t\t\t\targs: {\n\t\t\t\t\t\tboard_name: this.board.name,\n\t\t\t\t\t\tcolumn_name: column.title,\n\t\t\t\t\t\tindicator: color\n\t\t\t\t\t}\n\t\t\t\t}).then(function(r) {\n\t\t\t\t\tvar board = r.message;\n\t\t\t\t\tvar columns = prepare_columns(board.columns);\n\t\t\t\t\tupdater.set({\n\t\t\t\t\t\tcolumns: columns\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tfrappe.views.KanbanBoard = function(opts) {\n\n\t\tvar self = {};\n\t\tself.wrapper = opts.wrapper;\n\t\tself.cur_list = opts.cur_list;\n\t\tself.board_name = opts.board_name;\n\n\t\tself.update = function(cards) {\n\t\t\t// update cards internally\n\t\t\topts.cards = cards;\n\n\t\t\tif(self.wrapper.find('.kanban').length > 0 && self.cur_list.start !== 0) {\n\t\t\t\tfluxify.doAction('update_cards', cards);\n\t\t\t} else {\n\t\t\t\tinit();\n\t\t\t}\n\t\t};\n\n\t\tfunction init() {\n\t\t\tfluxify.doAction('init', opts);\n\t\t\tstore.on('change:columns', make_columns);\n\t\t\tprepare();\n\t\t\tstore.on('change:cur_list', setup_restore_columns);\n\t\t\tstore.on('change:columns', setup_restore_columns);\n\t\t\tstore.on('change:empty_state', show_empty_state);\n\t\t}\n\n\t\tfunction prepare() {\n\t\t\tself.$kanban_board = self.wrapper.find('.kanban');\n\n\t\t\tif(self.$kanban_board.length === 0) {\n\t\t\t\tself.$kanban_board = $(frappe.render_template(\"kanban_board\"));\n\t\t\t\tself.$kanban_board.appendTo(self.wrapper);\n\t\t\t}\n\n\t\t\tself.$filter_area = self.cur_list.$page.find('.active-tag-filters');\n\t\t\tbind_events();\n\t\t\tsetup_sortable();\n\t\t}\n\n\t\tfunction make_columns() {\n\t\t\tself.$kanban_board.find(\".kanban-column\").not(\".add-new-column\").remove();\n\t\t\tvar columns = store.getState().columns;\n\n\t\t\tcolumns.filter(is_active_column).map(function(col) {\n\t\t\t\tfrappe.views.KanbanBoardColumn(col, self.$kanban_board);\n\t\t\t});\n\t\t}\n\n\t\tfunction bind_events() {\n\t\t\tbind_add_column();\n\t\t}\n\n\t\tfunction setup_sortable() {\n\t\t\tvar sortable = new Sortable(self.$kanban_board.get(0), {\n\t\t\t\tgroup: 'columns',\n\t\t\t\tanimation: 150,\n\t\t\t\tdataIdAttr: 'data-column-value',\n\t\t\t\tfilter: '.add-new-column',\n\t\t\t\thandle: '.kanban-column-title',\n\t\t\t\tonEnd: function() {\n\t\t\t\t\tvar order = sortable.toArray();\n\t\t\t\t\torder = order.slice(1);\n\t\t\t\t\tfluxify.doAction('update_column_order', order);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction bind_add_column() {\n\n\t\t\tvar $add_new_column = self.$kanban_board.find(\".add-new-column\"),\n\t\t\t\t$compose_column = $add_new_column.find(\".compose-column\"),\n\t\t\t\t$compose_column_form = $add_new_column.find(\".compose-column-form\").hide();\n\n\t\t\t$compose_column.on('click', function() {\n\t\t\t\t$(this).hide();\n\t\t\t\t$compose_column_form.show();\n\t\t\t\t$compose_column_form.find('input').focus();\n\t\t\t});\n\n\t\t\t//save on enter\n\t\t\t$compose_column_form.keydown(function(e) {\n\t\t\t\tif (e.which == 13) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (!frappe.request.ajax_count) {\n\t\t\t\t\t\t// not already working -- double entry\n\t\t\t\t\t\tvar title = $compose_column_form.serializeArray()[0].value;\n\t\t\t\t\t\tvar col = {\n\t\t\t\t\t\t\ttitle: title.trim()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfluxify.doAction('add_column', col);\n\t\t\t\t\t\t$compose_column_form.find('input').val('');\n\t\t\t\t\t\t$compose_column.show();\n\t\t\t\t\t\t$compose_column_form.hide();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// on form blur\n\t\t\t$compose_column_form.find('input').on(\"blur\", function() {\n\t\t\t\t$(this).val('');\n\t\t\t\t$compose_column.show();\n\t\t\t\t$compose_column_form.hide();\n\t\t\t});\n\t\t}\n\n\t\tfunction setup_restore_columns() {\n\t\t\tvar cur_list = store.getState().cur_list;\n\t\t\tvar columns = store.getState().columns;\n\t\t\tvar list_row_right = cur_list.$page\n\t\t\t\t.find(`[data-list-renderer='Kanban'] .list-row-right`)\n\t\t\t\t.css('margin-right', '15px');\n\t\t\tlist_row_right.empty();\n\n\t\t\tvar archived_columns = columns.filter(function(col) {\n\t\t\t\treturn col.status === 'Archived';\n\t\t\t});\n\n\t\t\tif (!archived_columns.length) return;\n\n\t\t\tvar options = archived_columns.reduce(function(a, b) {\n\t\t\t\treturn a + \"<li><a class='option'>\" +\n\t\t\t\t\t\"<span class='ellipsis' style='max-width: 100px; display: inline-block'>\" +\n\t\t\t\t\t__(b.title) + \"</span>\" +\n\t\t\t\t\t\"<button style='float:right;' data-column='\" + b.title +\n\t\t\t\t\t\"' class='btn btn-default btn-xs restore-column text-muted'>\"\n\t\t\t\t\t+ __('Restore') + \"</button></a></li>\";\n\t\t\t}, \"\");\n\t\t\tvar $dropdown = $(\"<div class='dropdown pull-right'>\" +\n\t\t\t\t\"<a class='text-muted dropdown-toggle' data-toggle='dropdown'>\" +\n\t\t\t\t\"<span class='dropdown-text'>\" + __('Archived Columns') + \"</span><i class='caret'></i></a>\" +\n\t\t\t\t\"<ul class='dropdown-menu'>\" + options + \"</ul>\" +\n\t\t\t\t\"</div>\");\n\n\t\t\tlist_row_right.html($dropdown);\n\n\t\t\t$dropdown.find(\".dropdown-menu\").on(\"click\", \"button.restore-column\", function() {\n\t\t\t\tvar column_title = $(this).data().column;\n\t\t\t\tvar col = {\n\t\t\t\t\ttitle: column_title,\n\t\t\t\t\tstatus: 'Archived'\n\t\t\t\t};\n\t\t\t\tfluxify.doAction('restore_column', col);\n\t\t\t});\n\t\t}\n\n\t\tfunction show_empty_state() {\n\t\t\tvar empty_state = store.getState().empty_state;\n\n\t\t\tif(empty_state) {\n\t\t\t\tself.$kanban_board.find('.kanban-column').hide();\n\t\t\t\tself.$kanban_board.find('.kanban-empty-state').show();\n\t\t\t} else {\n\t\t\t\tself.$kanban_board.find('.kanban-column').show();\n\t\t\t\tself.$kanban_board.find('.kanban-empty-state').hide();\n\t\t\t}\n\t\t}\n\n\t\tinit();\n\n\t\treturn self;\n\t};\n\n\tfrappe.views.KanbanBoardColumn = function(column, wrapper) {\n\t\tvar self = {};\n\t\tvar filtered_cards = [];\n\n\t\tfunction init() {\n\t\t\tmake_dom();\n\t\t\tsetup_sortable();\n\t\t\tmake_cards();\n\t\t\tstore.on('change:cards', make_cards);\n\t\t\tbind_add_card();\n\t\t\tbind_options();\n\t\t}\n\n\t\tfunction make_dom() {\n\t\t\tself.$kanban_column = $(frappe.render_template(\n\t\t\t\t'kanban_column', {\n\t\t\t\t\ttitle: column.title,\n\t\t\t\t\tdoctype: store.getState().doctype,\n\t\t\t\t\tindicator: column.indicator\n\t\t\t\t})).appendTo(wrapper);\n\t\t\tself.$kanban_cards = self.$kanban_column.find('.kanban-cards');\n\t\t}\n\n\t\tfunction make_cards() {\n\t\t\tself.$kanban_cards.empty();\n\t\t\tvar cards = store.getState().cards;\n\t\t\tfiltered_cards = get_cards_for_column(cards, column);\n\t\t\tvar filtered_cards_names = filtered_cards.map(card => card.name);\n\n\t\t\tvar order = column.order;\n\t\t\tif(order) {\n\t\t\t\torder = JSON.parse(order);\n\t\t\t\torder.forEach(function(name) {\n\t\t\t\t\tif (!filtered_cards_names.includes(name)) return;\n\t\t\t\t\tfrappe.views.KanbanBoardCard(get_card(name), self.$kanban_cards);\n\t\t\t\t});\n\t\t\t\t// new cards\n\t\t\t\tfiltered_cards.forEach(function(card) {\n\t\t\t\t\tif(order.indexOf(card.name) === -1) {\n\t\t\t\t\t\tfrappe.views.KanbanBoardCard(card, self.$kanban_cards);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfiltered_cards.map(function(card) {\n\t\t\t\t\tfrappe.views.KanbanBoardCard(card, self.$kanban_cards);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction setup_sortable() {\n\t\t\tSortable.create(self.$kanban_cards.get(0), {\n\t\t\t\tgroup: \"cards\",\n\t\t\t\tanimation: 150,\n\t\t\t\tdataIdAttr: 'data-name',\n\t\t\t\tonStart: function() {\n\t\t\t\t\twrapper.find('.kanban-card.add-card').fadeOut(200, function() {\n\t\t\t\t\t\twrapper.find('.kanban-cards').height('100vh');\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tonEnd: function() {\n\t\t\t\t\twrapper.find('.kanban-card.add-card').fadeIn(100);\n\t\t\t\t\twrapper.find('.kanban-cards').height('auto');\n\t\t\t\t\t// update order\n\t\t\t\t\tfluxify.doAction('update_order');\n\t\t\t\t},\n\t\t\t\tonAdd: function() {\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tfunction bind_add_card() {\n\t\t\tvar $wrapper = self.$kanban_column;\n\t\t\tvar $btn_add = $wrapper.find('.add-card');\n\t\t\tvar $new_card_area = $wrapper.find('.new-card-area');\n\t\t\tvar $textarea = $new_card_area.find('textarea');\n\n\t\t\t//Add card button\n\t\t\t$new_card_area.hide();\n\t\t\t$btn_add.on('click', function() {\n\t\t\t\t$btn_add.hide();\n\t\t\t\t$new_card_area.show();\n\t\t\t\t$textarea.focus();\n\t\t\t});\n\n\t\t\t//save on enter\n\t\t\t$new_card_area.keydown(function(e) {\n\t\t\t\tif (e.which == 13) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (!frappe.request.ajax_count) {\n\t\t\t\t\t\t// not already working -- double entry\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tvar card_title = $textarea.val();\n\t\t\t\t\t\t$new_card_area.hide();\n\t\t\t\t\t\t$textarea.val('');\n\t\t\t\t\t\tfluxify.doAction('add_card', card_title, column.title)\n\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t$btn_add.show();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// on textarea blur\n\t\t\t$textarea.on(\"blur\", function() {\n\t\t\t\t$(this).val('');\n\t\t\t\t$btn_add.show();\n\t\t\t\t$new_card_area.hide();\n\t\t\t});\n\t\t}\n\n\t\tfunction bind_options() {\n\t\t\tself.$kanban_column.find(\".column-options .dropdown-menu\")\n\t\t\t\t.on(\"click\", \"[data-action]\", function() {\n\t\t\t\t\tvar $btn = $(this);\n\t\t\t\t\tvar action = $btn.data().action;\n\n\t\t\t\t\tif (action === \"archive\") {\n\t\t\t\t\t\tfluxify.doAction('archive_column', column);\n\t\t\t\t\t} else if (action === \"indicator\") {\n\t\t\t\t\t\tvar color = $btn.data().indicator;\n\t\t\t\t\t\tfluxify.doAction('set_indicator', column, color);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tget_column_indicators(function(indicators) {\n\t\t\t\tvar html = '<li class=\"button-group\">';\n\t\t\t\thtml += indicators.reduce(function(prev, curr) {\n\t\t\t\t\treturn prev + '<div \\\n\t\t\t\t\t\tdata-action=\"indicator\" data-indicator=\"'+curr+'\"\\\n\t\t\t\t\t\tclass=\"btn btn-default btn-xs indicator ' + curr + '\"></div>';\n\t\t\t\t}, \"\");\n\t\t\t\thtml += '</li>';\n\t\t\t\tself.$kanban_column.find(\".column-options .dropdown-menu\")\n\t\t\t\t\t.append(html);\n\t\t\t});\n\t\t}\n\n\t\tinit();\n\t};\n\n\tfrappe.views.KanbanBoardCard = function(card, wrapper) {\n\t\tvar self = {};\n\n\t\tfunction init() {\n\t\t\tif(!card) return;\n\t\t\tmake_dom();\n\t\t\trender_card_meta();\n\t\t\tbind_edit_card();\n\t\t\t// edit_card_title();\n\t\t}\n\n\t\tfunction make_dom() {\n\t\t\tvar opts = {\n\t\t\t\tname: card.name,\n\t\t\t\ttitle: remove_img_tags(card.title),\n\t\t\t\tfields_string: card.card_properties_display,\n\t\t\t\tdisable_click: card._disable_click ? 'disable-click' : ''\n\t\t\t};\n\t\t\tself.$card = $(frappe.render_template('kanban_card_new', opts))\n\t\t\t\t.appendTo(wrapper);\n\t\t}\n\n\t\tfunction render_card_meta() {\n\t\t\tvar html = \"\";\n\t\t\tif (card.comment_count > 0)\n\t\t\t\thtml += '<span class=\"list-comment-count small text-muted \">' +\n\t\t\t\t\t'<i class=\"octicon octicon-comment\"></i> ' + card.comment_count +\n\t\t\t\t\t'</span>';\n\t\t\thtml += get_assignees_html();\n\n\t\t\tif (card.color && frappe.ui.color.validate_hex(card.color)) {\n\t\t\t\tconst $div = $('<div>');\n\t\t\t\t$('<div></div>').css({\n\t\t\t\t\twidth: '20px',\n\t\t\t\t\theight: '5px',\n\t\t\t\t\tborderRadius: '2px',\n\t\t\t\t\tmarginBottom: '4px',\n\t\t\t\t\tbackgroundColor: card.color\n\t\t\t\t}).appendTo($div);\n\n\t\t\t\tself.$card.find('.kanban-card.content').prepend($div);\n\t\t\t}\n\n\t\t\tself.$card.find(\".kanban-card-meta\").empty().append(html);\n\t\t}\n\n\t\tfunction bind_edit_card() {\n\t\t\tself.$card.find('.kanban-card.content').on('click', function() {\n\t\t\t\tfrappe.set_route('Form', card.doctype, card.name);\n\t\t\t\t// setup_edit_card();\n\t\t\t});\n\t\t}\n\n\t\tfunction refresh_dialog() {\n\t\t\tset_dialog_fields();\n\t\t\tmake_assignees();\n\t\t}\n\n\t\tfunction set_dialog_fields() {\n\t\t\tself.edit_dialog.fields.forEach(function(df) {\n\t\t\t\tvar value = card.doc[df.fieldname];\n\t\t\t\tif (value) {\n\t\t\t\t\tself.edit_dialog.set_value(df.fieldname, value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction make_assignees() {\n\t\t\tvar d = self.edit_dialog;\n\t\t\tvar html = get_assignees_html() + '<a class=\"add-assignment avatar avatar-small avatar-empty\">\\\n\t\t\t\t<i class=\"octicon octicon-plus text-muted\" style=\"margin: 3px 0 0 5px;\"></i></a>';\n\n\t\t\td.$wrapper.find(\"[data-fieldname='assignees'] .control-input-wrapper\").empty().append(html);\n\t\t\td.$wrapper.find(\".add-assignment\").on(\"click\", function() {\n\t\t\t\tif (self.assign_to_dialog) {\n\t\t\t\t\tself.assign_to_dialog.show();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tshow_assign_to_dialog();\n\t\t\t});\n\t\t}\n\n\t\tfunction get_assignees_html() {\n\t\t\treturn card.assigned_list.reduce(function(a, b) {\n\t\t\t\treturn a + frappe.avatar(b);\n\t\t\t}, \"\");\n\t\t}\n\n\t\tfunction show_assign_to_dialog() {\n\t\t\tself.assign_to = new frappe.ui.form.AssignToDialog({\n\t\t\t\tobj: self,\n\t\t\t\tmethod: 'frappe.desk.form.assign_to.add',\n\t\t\t\tdoctype: card.doctype,\n\t\t\t\tdocname: card.name,\n\t\t\t\tcallback: function() {\n\t\t\t\t\tvar user = self.assign_to_dialog.get_values().assign_to;\n\t\t\t\t\tcard.assigned_list.push(user);\n\t\t\t\t\tfluxify.doAction('update_card', card);\n\t\t\t\t\trefresh_dialog();\n\t\t\t\t}\n\t\t\t});\n\t\t\tself.assign_to_dialog = self.assign_to.dialog;\n\t\t\tself.assign_to_dialog.show();\n\t\t}\n\n\t\tinit();\n\t};\n\n\tfunction prepare_card(card, state, doc) {\n\t\tvar assigned_list = card._assign ?\n\t\t\tJSON.parse(card._assign) : [];\n\t\tvar comment_count = card._comment_count || 0;\n\n\t\tif (doc) {\n\t\t\tcard = Object.assign({}, card, doc);\n\t\t}\n\t\t\n\t\tvar card_properties_display = []\n\n\t\tfor(var field of state.board.fields_to_show) {\n\t\t\tvar field_name = field.field\n\t\t\tvar field_title = field.field_title\n\t\t\tif(field_name && field_title && card[field_name]) {\n\t\t\t\tcard_properties_display.push(field_title + \": \" + card[field_name])\n\t\t\t}\n\t\t}\n\n\t\tvar column = '';\n\t\tif(state.board.board_based_on == 'Select') {\n\t\t\tcolumn = card[state.board.field_name]\t\n\t\t} else if(state.board.board_based_on == 'Date') {\n\t\t\tvar field_date = card[state.board.field_name]\t\n\t\t\tvar date_diff = frappe.datetime.get_day_diff(field_date, frappe.datetime.get_today())\n\t\t\t\n\t\t\tif(date_diff == 0) {\n\t\t\t\tcolumn = 'Today'\n\t\t\t} else if(date_diff == 1) {\n\t\t\t\tcolumn = 'Tomorrow'\n\t\t\t} else if(date_diff == 2) {\n\t\t\t\tcolumn = 'Day After Tomorrow'\n\t\t\t} else {\n\t\t\t\tcolumn = 'Other'\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdoctype: state.doctype,\n\t\t\tname: card.name,\n\t\t\ttitle: card[state.card_meta.title_field.fieldname],\n\t\t\tcolumn: column,\n\t\t\tcard_properties_display: card_properties_display,\n\t\t\tassigned_list: card.assigned_list || assigned_list,\n\t\t\tcomment_count: card.comment_count || comment_count,\n\t\t\tcolor: card.color || null,\n\t\t\tdoc: doc\n\t\t};\n\t}\n\n\tfunction prepare_columns(columns) {\n\t\treturn columns.map(function(col) {\n\t\t\treturn {\n\t\t\t\ttitle: col.column_name,\n\t\t\t\tstatus: col.status,\n\t\t\t\torder: col.order,\n\t\t\t\tindicator: col.indicator || 'darkgrey'\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction modify_column_field_in_c11n(doc, board, title, action) {\n\t\tdoc.fields.forEach(function(df) {\n\t\t\tif (df.fieldname === board.field_name && df.fieldtype === \"Select\") {\n\t\t\t\tif(!df.options) df.options = \"\";\n\n\t\t\t\tif (action === \"add\") {\n\t\t\t\t\t//add column_name to Select field's option field\n\t\t\t\t\tif(!df.options.includes(title))\n\t\t\t\t\t\tdf.options += \"\\n\" + title;\n\t\t\t\t} else if (action === \"delete\") {\n\t\t\t\t\tvar options = df.options.split(\"\\n\");\n\t\t\t\t\tvar index = options.indexOf(title);\n\t\t\t\t\tif (index !== -1) options.splice(index, 1);\n\t\t\t\t\tdf.options = options.join(\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn doc;\n\t}\n\n\tfunction fetch_customization(doctype) {\n\t\treturn new Promise(function(resolve) {\n\t\t\tfrappe.model.with_doc(\"Customize Form\", \"Customize Form\", function() {\n\t\t\t\tvar doc = frappe.get_doc(\"Customize Form\");\n\t\t\t\tdoc.doc_type = doctype;\n\t\t\t\tfrappe.call({\n\t\t\t\t\tdoc: doc,\n\t\t\t\t\tmethod: \"fetch_to_customize\",\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tresolve(r.docs[0]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction save_customization(doc) {\n\t\tif (!doc) return;\n\t\tdoc.hide_success = true;\n\t\treturn frappe.call({\n\t\t\tdoc: doc,\n\t\t\tmethod: \"save_customization\"\n\t\t});\n\t}\n\n\tfunction insert_doc(doc) {\n\t\treturn frappe.call({\n\t\t\tmethod: \"frappe.client.insert\",\n\t\t\targs: {\n\t\t\t\tdoc: doc\n\t\t\t},\n\t\t\tcallback: function() {\n\t\t\t\tfrappe.model.clear_doc(doc.doctype, doc.name);\n\t\t\t\tfrappe.show_alert({ message: __(\"Saved\"), indicator: 'green' }, 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction update_kanban_board(board_name, column_title, action) {\n\t\tvar method;\n\t\tvar args = {\n\t\t\tboard_name: board_name,\n\t\t\tcolumn_title: column_title\n\t\t};\n\t\tif (action === 'add') {\n\t\t\tmethod = 'add_column';\n\t\t} else if (action === 'archive' || action === 'restore') {\n\t\t\tmethod = 'archive_restore_column';\n\t\t\targs.status = action === 'archive' ? 'Archived' : 'Active';\n\t\t}\n\t\treturn frappe.call({\n\t\t\tmethod: method_prefix + method,\n\t\t\targs: args\n\t\t});\n\t}\n\n\tfunction is_filters_modified(board, cur_list) {\n\t\treturn new Promise(function(resolve) {\n\t\t\tsetTimeout(function() {\n\t\t\t\ttry {\n\t\t\t\t\tvar list_filters = JSON.stringify(cur_list.filter_area.get());\n\t\t\t\t\tresolve(list_filters !== board.filters);\n\t\t\t\t} catch(e) {\n\t\t\t\t\t// sometimes the filter_list is not initiated\n\t\t\t\t\tresolve(false);\n\t\t\t\t}\n\n\t\t\t}, 2000);\n\t\t});\n\t}\n\n\tfunction is_active_column(col) {\n\t\treturn col.status !== 'Archived';\n\t}\n\n\tfunction get_cards_for_column(cards, column) {\n\t\treturn cards.filter(function(card) {\n\t\t\treturn card.column === column.title;\n\t\t});\n\t}\n\n\tfunction get_card(name) {\n\t\treturn store.getState().cards.find(function(c) {\n\t\t\treturn c.name === name;\n\t\t});\n\t}\n\n\tfunction update_cards_column(updated_cards) {\n\t\tvar cards = store.getState().cards;\n\t\tcards.forEach(function(c) {\n\t\t\tupdated_cards.forEach(function(uc) {\n\t\t\t\tif(uc.name === c.name) {\n\t\t\t\t\tc.column = uc.column;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn cards;\n\t}\n\n\tfunction get_column_indicators(callback) {\n\t\tfrappe.model.with_doctype('Kanban Board Column', function() {\n\t\t\tvar meta = frappe.get_meta('Kanban Board Column');\n\t\t\tvar indicators;\n\t\t\tmeta.fields.forEach(function(df) {\n\t\t\t\tif(df.fieldname==='indicator') {\n\t\t\t\t\tindicators = df.options.split(\"\\n\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(!indicators) {\n\t\t\t\t//\n\t\t\t\tindicators = ['green', 'blue', 'orange', 'grey'];\n\t\t\t}\n\t\t\tcallback(indicators);\n\t\t});\n\t}\n\n\tfunction isBound(el, event, fn) {\n\t\tvar events = $._data(el[0], 'events');\n\t\tif(!events) return false;\n\t\tvar handlers = events[event];\n\t\tvar flag = false;\n\t\thandlers.forEach(function(h) {\n\t\t\tif(h.handler.name === fn.name)\n\t\t\t\tflag = true;\n\t\t});\n\t\treturn flag;\n\t}\n\n\tfunction remove_img_tags(html) {\n\t\tconst $temp = $(`<div>${html}</div>`);\n\t\t$temp.find('img').remove();\n\t\treturn $temp.html();\n\t}\n})();\n"],"names":["frappe","provide","method_prefix","store","fluxify","createStore","id","initialState","doctype","board","card_meta","cards","columns","filters_modified","cur_list","empty_state","actionCallbacks","init","updater","opts","set","map","card","prepare_card","prepare_columns","wrapper","update_cards","state","this","_cards","concat","uniqBy","name","add_column","col","model","can_create","doAction","msgprint","title","__","message","indicator","archive_column","restore_column","update_column","action","Promise","resolve","with_doc","doc","get_doc","doc_type","call","method","callback","r","docs","fetch_customization","then","fields","forEach","df","fieldname","field_name","fieldtype","options","includes","split","index","indexOf","splice","join","modify_column_field_in_c11n","save_customization","board_name","column_title","args","status","update_kanban_board","cols","err","console","error","add_card","card_title","get_new_doc","field","title_field","quick_entry","doc_fields","filter_area","get","f","$","extend","const","_disable_click","old_name","clear_doc","show_alert","insert_doc","updated_doc","findIndex","new_cards","slice","new_doc","update_card","c","i","update_doc","freeze","updated_card","update_order","_columns","order","find","each","col_name","data","columnValue","card_name","push","updated_cards","getState","uc","column","update_cards_column","fail","update_column_order","set_indicator","color","column_name","assigned_list","_assign","JSON","parse","comment_count","_comment_count","Object","assign","card_properties_display","fields_to_show","field_title","board_based_on","field_date","date_diff","datetime","get_day_diff","get_today","hide_success","is_active_column","views","KanbanBoard","self","on","make_columns","$kanban_board","length","render_template","appendTo","$filter_area","$page","$add_new_column","$compose_column","$compose_column_form","hide","show","focus","keydown","e","which","preventDefault","request","ajax_count","serializeArray","value","trim","val","sortable","Sortable","group","animation","dataIdAttr","filter","handle","onEnd","toArray","prepare","setup_restore_columns","show_empty_state","not","remove","KanbanBoardColumn","list_row_right","css","empty","archived_columns","reduce","a","b","$dropdown","html","update","start","$wrapper","$btn_add","$new_card_area","$textarea","filtered_cards","make_cards","$kanban_cards","filtered_cards_names","get_cards_for_column","KanbanBoardCard","get_card","$kanban_column","create","onStart","fadeOut","height","fadeIn","onAdd","$btn","indicators","prev","curr","append","with_doctype","meta","get_meta","$temp","fields_string","disable_click","$card","avatar","ui","validate_hex","$div","width","borderRadius","marginBottom","backgroundColor","prepend","render_card_meta","set_route"],"mappings":"yBAAAA,OAAOC,QAAQ,gBAEf,WAEC,IAAIC,EAAgB,iDAEhBC,EAAQC,QAAQC,aACnBC,GAAI,QACJC,cACCC,QAAS,GACTC,SACAC,aACAC,SACAC,WACAC,kBAAkB,EAClBC,YACAC,aAAa,GAEdC,iBACCC,KAAM,SAASC,EAASC,GACvBD,EAAQE,KACPL,aAAa,IAGd,IAAIN,EAAQU,EAAKV,MACbC,EAAYS,EAAKT,UACrBS,EAAKT,UAAYA,EACjBS,EAAKV,MAAQA,EACb,IAAIE,EAAQQ,EAAKR,MAAMU,IAAI,SAASC,GACnC,OAAOC,EAAaD,EAAMH,KAEvBP,EAAUY,EAAgBf,EAAMG,SAEpCM,EAAQE,KACPZ,QAASW,EAAKX,QACdC,MAAOA,EACPC,UAAWA,EACXC,MAAOA,EACPC,QAASA,EACTE,SAAUK,EAAKL,SACfC,aAAa,EACbU,QAASN,EAAKM,WAGhBC,aAAc,SAASR,EAASP,GAC/B,IAAIgB,EAAQC,KACRC,EAASlB,EACXU,aAAIC,UAAQC,EAAaD,EAAMK,KAC/BG,OAAOF,KAAKjB,OACZoB,gBAAOT,UAAQA,EAAKU,OAEtBd,EAAQE,KACPT,MAAOkB,KAGTI,WAAY,SAASf,EAASgB,GAC1BlC,OAAOmC,MAAMC,WAAW,gBAC1BhC,QAAQiC,SAAS,gBAAiBH,EAAK,OAEvClC,OAAOsC,UACNC,MAAOC,GAAG,iBACVC,QAASD,GAAG,yCACZE,UAAW,SAIdC,eAAgB,SAASzB,EAASgB,GACjC9B,QAAQiC,SAAS,gBAAiBH,EAAK,YAExCU,eAAgB,SAAS1B,EAASgB,GACjC9B,QAAQiC,SAAS,gBAAiBH,EAAK,YAExCW,cAAe,SAAS3B,EAASgB,EAAKY,GACrC,IAAItC,EAAUoB,KAAKpB,QACfC,EAAQmB,KAAKnB,OAwoBpB,SAA6BD,GAC5B,OAAO,IAAIuC,QAAQ,SAASC,GAC3BhD,OAAOmC,MAAMc,SAAS,iBAAkB,iBAAkB,WACzD,IAAIC,EAAMlD,OAAOmD,QAAQ,kBACzBD,EAAIE,SAAW5C,EACfR,OAAOqD,MACNH,IAAKA,EACLI,OAAQ,qBACRC,SAAU,SAASC,GAClBR,EAAQQ,EAAEC,KAAK,YAhpBjBC,CAAoBlD,GAClBmD,KAAK,SAAST,GACd,OAinBL,SAAqCA,EAAKzC,EAAO8B,EAAOO,GAiBvD,OAhBAI,EAAIU,OAAOC,QAAQ,SAASC,GAC3B,GAAIA,EAAGC,YAActD,EAAMuD,YAA+B,WAAjBF,EAAGG,UAG3C,GAFIH,EAAGI,UAASJ,EAAGI,QAAU,IAEd,QAAXpB,EAECgB,EAAGI,QAAQC,SAAS5B,KACvBuB,EAAGI,SAAW,KAAO3B,QAChB,GAAe,WAAXO,EAAqB,CAC/B,IAAIoB,EAAUJ,EAAGI,QAAQE,MAAM,MAC3BC,EAAQH,EAAQI,QAAQ/B,IACb,IAAX8B,GAAcH,EAAQK,OAAOF,EAAO,GACxCP,EAAGI,QAAUA,EAAQM,KAAK,SAItBtB,EAloBIuB,CAA4BvB,EAAKzC,EAAOyB,EAAIK,MAAOO,KAE1Da,KAAKe,GACLf,KAAK,WACL,OAuqBL,SAA6BgB,EAAYC,EAAc9B,GACtD,IAAIQ,EACAuB,GACHF,WAAYA,EACZC,aAAcA,GAEA,QAAX9B,EACHQ,EAAS,aACY,YAAXR,GAAmC,YAAXA,IAClCQ,EAAS,yBACTuB,EAAKC,OAAoB,YAAXhC,EAAuB,WAAa,UAEnD,OAAO9C,OAAOqD,MACbC,OAAQpD,EAAgBoD,EACxBuB,KAAMA,IArrBIE,CAAoBtE,EAAMuB,KAAME,EAAIK,MAAOO,KAChDa,KAAK,SAASH,GAChB,IAAIwB,EAAOxB,EAAEf,QACbvB,EAAQE,KACPR,QAASY,EAAgBwD,MAExB,SAASC,GACXC,QAAQC,MAAMF,MAGjBG,SAAU,SAASlE,EAASmE,EAAYT,GACvC,IAAI1B,EAAMlD,OAAOmC,MAAMmD,YAAY1D,KAAKpB,SACpC+E,EAAQ3D,KAAKlB,UAAU8E,YACvBC,EAAc7D,KAAKlB,UAAU+E,YAC7B9D,EAAQC,KAER8D,KACJA,EAAWH,EAAMxB,WAAasB,EAC9BK,EAAW9D,KAAKnB,MAAMuD,YAAcY,EACpChD,KAAKd,SAAS6E,YAAYC,MAAM/B,QAAQ,SAASgC,GACnC,MAATA,EAAE,KACNH,EAAWG,EAAE,IAAMA,EAAE,MAGtBC,EAAEC,OAAO7C,EAAKwC,GAIdM,IAAM1E,EAAOC,EAAa2B,EAAKvB,GAC/BL,EAAK2E,gBAAiB,EACtBD,IAAMrF,EAAQgB,EAAUhB,cAAOW,IAEzB4E,EAAWhD,EAAIlB,KAGrB,GAFAd,EAAQE,WAAMT,IAEV4E,IAAUE,EACb,OAsnBJ,SAAoBvC,GACnB,OAAOlD,OAAOqD,MACbC,OAAQ,uBACRuB,MACC3B,IAAKA,GAENK,SAAU,WACTvD,OAAOmC,MAAMgE,UAAUjD,EAAI1C,QAAS0C,EAAIlB,MACxChC,OAAOoG,YAAa3D,QAASD,GAAG,SAAUE,UAAW,SAAW,MA9nBxD2D,CAAWnD,GAChBS,KAAK,SAASH,GAEdwC,IAAMM,EAAc9C,EAAEf,QAChB4B,EAAQ1C,EAAMhB,MAAM4F,mBAAUjF,UAAQA,EAAKU,OAASkE,IACpD5E,EAAOC,EAAa+E,EAAa3E,GACjC6E,EAAY7E,EAAMhB,MAAM8F,QAC9BD,EAAUnC,GAAS/C,EACnBJ,EAAQE,KAAMT,MAAO6F,IACrBpG,QAAQiC,SAAS,kBAGnBrC,OAAO0G,QAAQ9E,KAAKpB,QAAS0C,IAG/ByD,YAAa,SAASzF,EAASI,GAC9B,IAAI+C,GAAS,EACbzC,KAAKjB,MAAMkD,QAAQ,SAAS+C,EAAGC,GAC1BD,EAAE5E,OAASV,EAAKU,OACnBqC,EAAQwC,KAGV,IAAIlG,EAAQiB,KAAKjB,MAAM8F,SACR,IAAXpC,GACH1D,EAAM4D,OAAOF,EAAO,EAAG/C,GAExBJ,EAAQE,KAAMT,MAAOA,KAEtBmG,WAAY,SAAS5F,EAASgC,EAAK5B,GAClC,IAAIK,EAAQC,KACZ,OAAO5B,OAAOqD,MACbC,OAAQpD,EAAgB,aACxB2E,MAAQ3B,IAAKA,GACb6D,QAAQ,IACNpD,KAAK,SAASH,GAChB,IAAI8C,EAAc9C,EAAEf,QAChBuE,EAAezF,EAAaD,EAAMK,EAAO2E,GAC7ClG,QAAQiC,SAAS,cAAe2E,MAGlCC,aAAc,SAAS/F,GAEtB8E,IAAMnE,EAASD,KAAKjB,MAAM8F,QACpBS,EAAWtF,KAAKhB,QAAQ6F,QAExBU,KACNvF,KAAKH,QAAQ2F,KAAK,qCAChBC,KAAK,WACL,IAAIC,EAAWxB,EAAElE,MAAM2F,OAAOC,YAC9BL,EAAMG,MACNxB,EAAElE,MAAMwF,KAAK,wBAAwBC,KAAK,WACzC,IAAII,EAAY3B,EAAElE,MAAM2F,OAAOvF,KAC/BmF,EAAMG,GAAUI,KAAKD,OAIxBzH,OAAOqD,MACNC,OAAQpD,EAAgB,eACxB2E,MACCF,WAAY/C,KAAKnB,MAAMuB,KACvBmF,MAAOA,GAER5D,kBAAWC,GACV,IAAI/C,EAAQ+C,EAAEf,QAAQ,GAElB9B,EAmnBT,SAA6BgH,GAC5B,IAAIhH,EAAQR,EAAMyH,WAAWjH,MAQ7B,OAPAA,EAAMkD,QAAQ,SAAS+C,GACtBe,EAAc9D,QAAQ,SAASgE,GAC3BA,EAAG7F,OAAS4E,EAAE5E,OAChB4E,EAAEkB,OAASD,EAAGC,YAIVnH,EA5nBSoH,CADQvE,EAAEf,QAAQ,IAE1B7B,EAAUY,EAAgBf,EAAMG,SACpCM,EAAQE,KACPT,MAAOA,EACPC,QAASA,OAGToH,KAAK,WAEP9G,EAAQE,KACPT,MAAOkB,EACPjB,QAASsG,OAIZe,oBAAqB,SAAS/G,EAASiG,GACtC,OAAOnH,OAAOqD,MACbC,OAAQpD,EAAgB,sBACxB2E,MACCF,WAAY/C,KAAKnB,MAAMuB,KACvBmF,MAAOA,KAENxD,KAAK,SAASH,GAChB,IACI5C,EAAUY,EADFgC,EAAEf,QACsB7B,SACpCM,EAAQE,KACPR,QAASA,OAIZsH,cAAe,SAAShH,EAAS4G,EAAQK,GACxC,OAAOnI,OAAOqD,MACbC,OAAQpD,EAAgB,gBACxB2E,MACCF,WAAY/C,KAAKnB,MAAMuB,KACvBoG,YAAaN,EAAOvF,MACpBG,UAAWyF,KAEVxE,KAAK,SAASH,GAChB,IACI5C,EAAUY,EADFgC,EAAEf,QACsB7B,SACpCM,EAAQE,KACPR,QAASA,UAiad,SAASW,EAAaD,EAAMK,EAAOuB,GAClC,IAAImF,EAAgB/G,EAAKgH,QACxBC,KAAKC,MAAMlH,EAAKgH,YACbG,EAAgBnH,EAAKoH,gBAAkB,EAEvCxF,IACH5B,EAAOqH,OAAOC,UAAWtH,EAAM4B,IAKhC,IAFA,IAAI2F,WAEalH,EAAMlB,MAAMqI,+BAAgB,CAAzC,IAAIvD,OACHvB,EAAauB,EAAMA,MACnBwD,EAAcxD,EAAMwD,YACrB/E,GAAc+E,GAAezH,EAAK0C,IACpC6E,EAAwBnB,KAAKqB,EAAc,KAAOzH,EAAK0C,IAIzD,IAAI8D,EAAS,GACb,GAAiC,UAA9BnG,EAAMlB,MAAMuI,eACdlB,EAASxG,EAAKK,EAAMlB,MAAMuD,iBACpB,GAAiC,QAA9BrC,EAAMlB,MAAMuI,eAA0B,CAC/C,IAAIC,EAAa3H,EAAKK,EAAMlB,MAAMuD,YAC9BkF,EAAYlJ,OAAOmJ,SAASC,aAAaH,EAAYjJ,OAAOmJ,SAASE,aAGxEvB,EADe,GAAboB,EACO,QACa,GAAbA,EACA,WACa,GAAbA,EACA,qBAEA,QAIX,OACC1I,QAASmB,EAAMnB,QACfwB,KAAMV,EAAKU,KACXO,MAAOjB,EAAKK,EAAMjB,UAAU8E,YAAYzB,WACxC+D,OAAQA,EACRe,wBAAyBA,EACzBR,cAAe/G,EAAK+G,eAAiBA,EACrCI,cAAenH,EAAKmH,eAAiBA,EACrCN,MAAO7G,EAAK6G,OAAS,KACrBjF,IAAKA,GAIP,SAAS1B,EAAgBZ,GACxB,OAAOA,EAAQS,IAAI,SAASa,GAC3B,OACCK,MAAOL,EAAIkG,YACXtD,OAAQ5C,EAAI4C,OACZqC,MAAOjF,EAAIiF,MACXzE,UAAWR,EAAIQ,WAAa,cAyC/B,SAASgC,EAAmBxB,GAC3B,GAAKA,EAEL,OADAA,EAAIoG,cAAe,EACZtJ,OAAOqD,MACbH,IAAKA,EACLI,OAAQ,uBAkDV,SAASiG,EAAiBrH,GACzB,MAAsB,aAAfA,EAAI4C,OAnjBZ9E,OAAOwJ,MAAMC,YAAc,SAAStI,GAEnC,IAAIuI,KAgBJ,SAASzI,IACRb,QAAQiC,SAAS,OAAQlB,GACzBhB,EAAMwJ,GAAG,iBAAkBC,GAO5B,WACCF,EAAKG,cAAgBH,EAAKjI,QAAQ2F,KAAK,WAEN,IAA9BsC,EAAKG,cAAcC,SACrBJ,EAAKG,cAAgB/D,EAAE9F,OAAO+J,gBAAgB,iBAC9CL,EAAKG,cAAcG,SAASN,EAAKjI,UAGlCiI,EAAKO,aAAeP,EAAK5I,SAASoJ,MAAM9C,KAAK,uBAmCzC+C,EAAkBT,EAAKG,cAAczC,KAAK,mBAC7CgD,EAAkBD,EAAgB/C,KAAK,mBACvCiD,EAAuBF,EAAgB/C,KAAK,wBAAwBkD,OAErEF,EAAgBT,GAAG,QAAS,WAC3B7D,EAAElE,MAAM0I,OACRD,EAAqBE,OACrBF,EAAqBjD,KAAK,SAASoD,UAIpCH,EAAqBI,QAAQ,SAASC,GACrC,GAAe,IAAXA,EAAEC,QACLD,EAAEE,kBACG5K,OAAO6K,QAAQC,YAAY,CAE/B,IAAIvI,EAAQ8H,EAAqBU,iBAAiB,GAAGC,MACjD9I,GACHK,MAAOA,EAAM0I,QAEd7K,QAAQiC,SAAS,aAAcH,GAC/BmI,EAAqBjD,KAAK,SAAS8D,IAAI,IACvCd,EAAgBG,OAChBF,EAAqBC,UAMxBD,EAAqBjD,KAAK,SAASuC,GAAG,OAAQ,WAC7C7D,EAAElE,MAAMsJ,IAAI,IACZd,EAAgBG,OAChBF,EAAqBC,SAhDlBa,EAAW,IAAIC,SAAS1B,EAAKG,cAAcjE,IAAI,IAClDyF,MAAO,UACPC,UAAW,IACXC,WAAY,oBACZC,OAAQ,kBACRC,OAAQ,uBACRC,MAAO,WACN,IAAIvE,EAAQgE,EAASQ,UACrBxE,EAAQA,EAAMV,MAAM,GACpBrG,QAAQiC,SAAS,sBAAuB8E,MAV3C,IACKgE,EALL,IAqBKhB,EACHC,EACAC,EAnDDuB,GACAzL,EAAMwJ,GAAG,kBAAmBkC,GAC5B1L,EAAMwJ,GAAG,iBAAkBkC,GAC3B1L,EAAMwJ,GAAG,qBAAsBmC,GAgBhC,SAASlC,IACRF,EAAKG,cAAczC,KAAK,kBAAkB2E,IAAI,mBAAmBC,SACnD7L,EAAMyH,WAAWhH,QAEvB4K,OAAOjC,GAAkBlI,IAAI,SAASa,GAC7ClC,OAAOwJ,MAAMyC,kBAAkB/J,EAAKwH,EAAKG,iBA6D3C,SAASgC,IACR,IAAI/K,EAAWX,EAAMyH,WAAW9G,SAC5BF,EAAUT,EAAMyH,WAAWhH,QAC3BsL,EAAiBpL,EAASoJ,MAC5B9C,KAAK,iDACL+E,IAAI,eAAgB,QACtBD,EAAeE,QAEf,IAAIC,EAAmBzL,EAAQ4K,OAAO,SAAStJ,GAC9C,MAAsB,aAAfA,EAAI4C,SAGZ,GAAKuH,EAAiBvC,OAAtB,CAEA,IAAI5F,EAAUmI,EAAiBC,OAAO,SAASC,EAAGC,GACjD,OAAOD,EAAI,gGAEV/J,GAAGgK,EAAEjK,OAAS,oDACiCiK,EAAEjK,MACjD,8DACEC,GAAG,WAAa,sBACjB,IACCiK,EAAY3G,EAAE,6HAEgBtD,GAAG,oBAAsB,6DAC3B0B,EAAU,eAG1CgI,EAAeQ,KAAKD,GAEpBA,EAAUrF,KAAK,kBAAkBuC,GAAG,QAAS,wBAAyB,WACrE,IACIzH,GACHK,MAFkBuD,EAAElE,MAAM2F,OAAOO,OAGjChD,OAAQ,YAET1E,QAAQiC,SAAS,iBAAkBH,MAIrC,SAAS4J,IACU3L,EAAMyH,WAAW7G,aAGlC2I,EAAKG,cAAczC,KAAK,kBAAkBkD,OAC1CZ,EAAKG,cAAczC,KAAK,uBAAuBmD,SAE/Cb,EAAKG,cAAczC,KAAK,kBAAkBmD,OAC1Cb,EAAKG,cAAczC,KAAK,uBAAuBkD,QAMjD,OA7JAZ,EAAKjI,QAAUN,EAAKM,QACpBiI,EAAK5I,SAAWK,EAAKL,SACrB4I,EAAK/E,WAAaxD,EAAKwD,WAEvB+E,EAAKiD,OAAS,SAAShM,GAEtBQ,EAAKR,MAAQA,EAEV+I,EAAKjI,QAAQ2F,KAAK,WAAW0C,OAAS,GAA6B,IAAxBJ,EAAK5I,SAAS8L,MAC3DxM,QAAQiC,SAAS,eAAgB1B,GAEjCM,KAgJFA,IAEOyI,GAGR1J,OAAOwJ,MAAMyC,kBAAoB,SAASnE,EAAQrG,GACjD,IAsEKoL,EACAC,EACAC,EACAC,EAiWyBzJ,EA1a1BmG,KACAuD,KAqBJ,SAASC,IACRxD,EAAKyD,cAAcf,QACnB,IAAIzL,EAAQR,EAAMyH,WAAWjH,MAEzByM,GADJH,EAyXF,SAA8BtM,EAAOmH,GACpC,OAAOnH,EAAM6K,OAAO,SAASlK,GAC5B,OAAOA,EAAKwG,SAAWA,EAAOvF,QA3Xb8K,CAAqB1M,EAAOmH,IACHzG,aAAIC,UAAQA,EAAKU,OAEvDmF,EAAQW,EAAOX,MAChBA,IACFA,EAAQoB,KAAKC,MAAMrB,IACbtD,QAAQ,SAAS7B,GACjBoL,EAAqBjJ,SAASnC,IACnChC,OAAOwJ,MAAM8D,gBAuXjB,SAAkBtL,GACjB,OAAO7B,EAAMyH,WAAWjH,MAAMyG,KAAK,SAASR,GAC3C,OAAOA,EAAE5E,OAASA,IAzXauL,CAASvL,GAAO0H,EAAKyD,iBAGnDF,EAAepJ,QAAQ,SAASvC,IACE,IAA9B6F,EAAM7C,QAAQhD,EAAKU,OACrBhC,OAAOwJ,MAAM8D,gBAAgBhM,EAAMoI,EAAKyD,kBAI1CF,EAAe5L,IAAI,SAASC,GAC3BtB,OAAOwJ,MAAM8D,gBAAgBhM,EAAMoI,EAAKyD,iBA9B1CzD,EAAK8D,eAAiB1H,EAAE9F,OAAO+J,gBAC9B,iBACCxH,MAAOuF,EAAOvF,MACd/B,QAASL,EAAMyH,WAAWpH,QAC1BkC,UAAWoF,EAAOpF,aACfsH,SAASvI,GACdiI,EAAKyD,cAAgBzD,EAAK8D,eAAepG,KAAK,iBA8B9CgE,SAASqC,OAAO/D,EAAKyD,cAAcvH,IAAI,IACtCyF,MAAO,QACPC,UAAW,IACXC,WAAY,YACZmC,QAAS,WACRjM,EAAQ2F,KAAK,yBAAyBuG,QAAQ,IAAK,WAClDlM,EAAQ2F,KAAK,iBAAiBwG,OAAO,YAGvClC,MAAO,WACNjK,EAAQ2F,KAAK,yBAAyByG,OAAO,KAC7CpM,EAAQ2F,KAAK,iBAAiBwG,OAAO,QAErCxN,QAAQiC,SAAS,iBAElByL,MAAO,eA1DRZ,IACA/M,EAAMwJ,GAAG,eAAgBuD,GA+DrBL,EAAWnD,EAAK8D,eAChBV,EAAWD,EAASzF,KAAK,aACzB2F,EAAiBF,EAASzF,KAAK,kBAC/B4F,EAAYD,EAAe3F,KAAK,YAGpC2F,EAAezC,OACfwC,EAASnD,GAAG,QAAS,WACpBmD,EAASxC,OACTyC,EAAexC,OACfyC,EAAUxC,UAIXuC,EAAetC,QAAQ,SAASC,GAC/B,GAAe,IAAXA,EAAEC,QACLD,EAAEE,kBACG5K,OAAO6K,QAAQC,YAAY,CAE/BJ,EAAEE,iBACF,IAAIvF,EAAa2H,EAAU9B,MAC3B6B,EAAezC,OACf0C,EAAU9B,IAAI,IACd9K,QAAQiC,SAAS,WAAYgD,EAAYyC,EAAOvF,OAC9CoB,gBACAmJ,EAASvC,YAOdyC,EAAUrD,GAAG,OAAQ,WACpB7D,EAAElE,MAAMsJ,IAAI,IACZ4B,EAASvC,OACTwC,EAAezC,SAKhBZ,EAAK8D,eAAepG,KAAK,kCACvBuC,GAAG,QAAS,gBAAiB,WAC7B,IAAIoE,EAAOjI,EAAElE,MACTkB,EAASiL,EAAKxG,OAAOzE,OAEzB,GAAe,YAAXA,EACH1C,QAAQiC,SAAS,iBAAkByF,QAC7B,GAAe,cAAXhF,EAAwB,CAClC,IAAIqF,EAAQ4F,EAAKxG,OAAO7E,UACxBtC,QAAQiC,SAAS,gBAAiByF,EAAQK,MAmThB5E,EAhTP,SAASyK,GAC9B,IAAItB,EAAO,4BACXA,GAAQsB,EAAW1B,OAAO,SAAS2B,EAAMC,GACxC,OAAOD,EAAO,4DAC6BC,EAAK,wDACHA,EAAO,YAClD,IACHxB,GAAQ,QACRhD,EAAK8D,eAAepG,KAAK,kCACvB+G,OAAOzB,IAwSX1M,OAAOmC,MAAMiM,aAAa,sBAAuB,WAChD,IACIJ,EADAK,EAAOrO,OAAOsO,SAAS,uBAE3BD,EAAKzK,OAAOC,QAAQ,SAASC,GACV,cAAfA,EAAGC,YACLiK,EAAalK,EAAGI,QAAQE,MAAM,SAG5B4J,IAEHA,GAAc,QAAS,OAAQ,SAAU,SAE1CzK,EAASyK,MA7SXhO,OAAOwJ,MAAM8D,gBAAkB,SAAShM,EAAMG,GAC7C,IAWKN,EAiTmBuL,EAClB6B,EA7TF7E,KAGCpI,IAQAH,GACHa,KAAMV,EAAKU,KACXO,OA+SsBmK,EA/SCpL,EAAKiB,MAgTxBgM,EAAQzI,UAAU4G,YACxB6B,EAAMnH,KAAK,OAAO4E,SACXuC,EAAM7B,QAjTX8B,cAAelN,EAAKuH,wBACpB4F,cAAenN,EAAK2E,eAAiB,gBAAkB,IAExDyD,EAAKgF,MAAQ5I,EAAE9F,OAAO+J,gBAAgB,kBAAmB5I,IACvD6I,SAASvI,GAGZ,WACC,IAAIiL,EAAO,GAOX,GANIpL,EAAKmH,cAAgB,IACxBiE,GAAQ,8FACsCpL,EAAKmH,cAClD,WACFiE,GAuDOpL,EAAK+G,cAAciE,OAAO,SAASC,EAAGC,GAC5C,OAAOD,EAAIvM,OAAO2O,OAAOnC,IACvB,IAvDClL,EAAK6G,OAASnI,OAAO4O,GAAGzG,MAAM0G,aAAavN,EAAK6G,OAAQ,CAC3DnC,IAAM8I,EAAOhJ,EAAE,SACfA,EAAE,eAAeqG,KAChB4C,MAAO,OACPnB,OAAQ,MACRoB,aAAc,MACdC,aAAc,MACdC,gBAAiB5N,EAAK6G,QACpB6B,SAAS8E,GAEZpF,EAAKgF,MAAMtH,KAAK,wBAAwB+H,QAAQL,GAGjDpF,EAAKgF,MAAMtH,KAAK,qBAAqBgF,QAAQ+B,OAAOzB,GArCpD0C,GAyCA1F,EAAKgF,MAAMtH,KAAK,wBAAwBuC,GAAG,QAAS,WACnD3J,OAAOqP,UAAU,OAAQ/N,EAAKd,QAASc,EAAKU,UAnkBhD"}